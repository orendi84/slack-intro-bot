name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        python run_tests.py lint
    
    - name: Run tests
      run: |
        python run_tests.py
    
    - name: Run tests with coverage
      if: matrix.python-version == '3.11'
      run: |
        python run_tests.py coverage
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: bandit-action/bandit@v1.0.0
      with:
        path: .
        format: json
        output: bandit-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Check if README exists and has content
        test -f README.md
        test -f PROJECT_OVERVIEW.md
        
        # Check if documentation has minimum content
        test $(wc -l < README.md) -gt 50
        test $(wc -l < PROJECT_OVERVIEW.md) -gt 100
        
        echo "âœ… Documentation checks passed"

  build:
    runs-on: ubuntu-latest
    needs: [test, security, documentation]
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release package
      run: |
        mkdir -p release
        cp *.py release/
        cp *.md release/
        cp -r tests release/
        cp requirements.txt release/
        
        tar -czf slack-intro-bot.tar.gz -C release .
        
        echo "ðŸ“¦ Release package created: slack-intro-bot.tar.gz"
        ls -la slack-intro-bot.tar.gz
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: slack-intro-bot.tar.gz
